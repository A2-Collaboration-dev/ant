#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

use Cwd qw(abs_path getcwd);
use File::Path qw(rmtree mkpath);
use File::Basename qw(basename);
use Text::ParseWords;
use POSIX;

my $filelist = '-';             # default STDIN
my $clean = 0;
my $backup = 0;
my $help = 0;
my $cwd = getcwd;
my $jobtag = 'Ant';
my $QSUB_BIN = 'qsub';
my $ANT_BIN = which('Ant');
my $ANT_ARGS = '-b';            # ensure batch mode
my $LOG_DIR = 'log';
my $OUT_DIR = 'root';
my $no_log = 0;
my $no_test = 0;
my $no_qsub = 0;
my $queue = 'dflt';
my $walltime = '2:00:00'; # dflt_short has 2h walltime
my $priority = 0; # job priority for qsub

# parse options
Getopt::Long::Configure(qw(gnu_getopt));
GetOptions(
           'help|h' => \$help,
           'clean|c' => \$clean,
           'backup|b' => \$backup,
           'tag|t=s' => \$jobtag,
           'filelist=s' => \$filelist,
           'no_log' => \$no_log,
           'no_test' => \$no_test,
           'no_qsub' => \$no_qsub,
           'queue=s' => \$queue,
           'walltime=s' => \$walltime,
           'priority=s' => \$priority
          ) or print_help();
if ($help) {
  print_help();
}

my $timestampstr = strftime('%Y-%m-%d-%H-%M-%S',localtime);
if ($clean && $backup) {
  die "Requesting --clean and --backup at once makes no sense\n";
}

&main;

sub main {
  # check some things before submission
  die "Ant not found in PATH=$ENV{PATH}" unless defined $ANT_BIN;

  # read in additional Ant args
  if (-f "Antrc") {
    open(my $Antrc_fh, "<Antrc") or die "Can't open Antrc: $!";
    while (my $line = <$Antrc_fh>) {
      # remove leading and trailing whitespace
      $line =~ s/^\s+//;
      $line =~ s/\s+$//;
      next if $line eq '';
      next if $line =~ /^#/;
      die "Argument $line in Antrc does not start with -" unless $line =~ /^\-/;
      $ANT_ARGS .= " $line";
    }
    close $Antrc_fh;
  } elsif (@ARGV==0) {
    die "No Antrc found and no additional arguments for Ant provided\n";
  }

  # any additional options to Ant
  for my $arg (@ARGV) {
    die "Optional argument '$arg' does not start with -" unless $arg =~ /^\-/;
    $ANT_ARGS .= " $arg";
  }

  # read in the filelist, check for more errors
  open(my $filelist_fh, "<$filelist") or die "Can't open filelist $filelist: $!\n";
  my $n = 0;
  my @jobs;
  my %basenames;
 line:
  while (my $line = <$filelist_fh>) {
    $n++;
    # remove leading and trailing whitespace
    $line =~ s/^\s+//;
    $line =~ s/\s+$//;
    my @inputfiles;
    for my $inputfile (parse_line('\s+',0,$line)) {
      unless(-f $inputfile) {
        warn "Warning: Inputfile $inputfile does not exist, skipping.";
        next line;
      }
      unless($inputfile =~ /\.(dat|dat\.xz|dat\.gz|root)$/) {
        warn "Warning: Inputfile $inputfile does not end with .dat[.xz|.gz] or .root, skipping";
        next line;
      }
      push(@inputfiles, $inputfile);
    }

    next line if @inputfiles==0;


    my $basename = basename($inputfiles[0]);
    my $oldbasename = $basename;
    if(exists $basenames{$basename}) {
      $basename .= '_'.$basenames{$basename};
      warn "Basename '$oldbasename' already seen, changed to '$basename'";
    }
    $basenames{$oldbasename}++;

    my $runnumber = extract_runnumber($inputfiles[0]);
    unless(defined $runnumber) {
      # use line number by default
      $runnumber = $n;
    }
    push(@jobs, {
                 'inputfiles' => \@inputfiles,
                 'jobnumber' => $runnumber,
                 'logfile' => "$LOG_DIR/".$jobtag."_$basename.log",
                 'outputfile' => "$OUT_DIR/".$jobtag."_$basename.root"
                }
        );
  }
  close $filelist_fh;

  my $total = scalar @jobs;
  die "No jobs to be submitted, abort.\n" if $total==0;

  prepare_dir('outputfile', $OUT_DIR, \@jobs);
  prepare_dir('logfile',    $LOG_DIR, \@jobs);

  # create items from jobs
  my @submissions;
  for my $job (@jobs) {
    push(@submissions, create_submission($job));
  }

  # test the first job
  if (!$no_test) {

    my $ant_cmd_test = $submissions[0]->[1];
    $ant_cmd_test .= ' -m 1 -b';
    print STDERR "Testing the first job locally...\n";
    open my $testpipe, "$ant_cmd_test |" or die "error running '$ant_cmd_test': $!";
    my @outputlines = <$testpipe>;
    close $testpipe;
    my $exitcode = $? >> 8;
    my $ant_outputfile_test = $jobs[0]->{outputfile};
    if ($exitcode != 0) {
      unlink $ant_outputfile_test;
      die "The test execution of '$ant_cmd_test' returned with non-zero exit code $exitcode:\n".join('',@outputlines);
    }

    unless(-f $ant_outputfile_test) {
      die "The test execution of '$ant_cmd_test' did not create the outputfile '$ant_outputfile_test'";
    }
    unlink $ant_outputfile_test;
  }

  if($no_qsub) {
    for my $sub (@submissions) {
      print STDOUT $sub->[1],"\n";
    }
  }
  else {
    # finally submit the jobs
    my $submitted = 0;
    for my $sub (@submissions) {
      submit_job($sub);
      $submitted++;
      printf(STDERR "%-40s\r",sprintf("%04d/%04d = %03.0f %% submitted",$submitted,$total,100*$submitted/$total));
    }
    printf(STDERR "%-40s\n", "Submitted $submitted jobs.");

    if ($no_log) {
      return;
    }

    open(my $fh_log, ">>AntSubmit.log") or die "Can't open AntSubmit.log: $!";
    printf $fh_log "%s: %04d jobs with args '%s'\n", $timestampstr, $submitted, $ANT_ARGS;
    close $fh_log;
  }
}

sub prepare_dir {
  my $tag = shift;
  my $dir = shift;
  my @jobs = @{shift()};


  
  unless(-d $dir) {
    mkpath([$dir]) == 1 or die "Cannot create folder '$dir'";
  } else {

    my $backupdir = $dir.'_'.$timestampstr;
    if ($backup) {
      if (-d $backupdir) {
        die "Backupdir '$backupdir' already exists";
      }
      mkpath([$backupdir]) == 1 or die "Cannot create folder '$backupdir'";
    }
    
    my $n_files = 0;
    for my $job (@jobs) {
      my $file = $job->{$tag};
      if (-f $file) {
        if($clean) {
          unlink $file or die "Cannot delete file $file: $!";
        }
        elsif($backup) {
          my $basename = basename($file);
          my $backupfile = "$backupdir/$basename";
          rename $file,$backupfile or die "Cannot move $file to $backupfile: $!";
        }
        else {
          die "File $file already exists. Use --clean or --backup?\n";
        }
        $n_files++;
      }
    }
    if ($clean) {
      printf(STDERR "%04d %s cleaned\n", $n_files, $tag.'s', );
    }
    elsif($backup) {
      printf(STDERR "%04d %s backuped to %s\n", $n_files, $tag.'s', $backupdir);
    }
  }

}

sub extract_runnumber {
  my $f = shift;
  if ($f =~ /_(\d+?)\.dat/) {
    return $1;
  }
  return undef;
}

sub which {
  my $cmd = shift;
  open(my $p, "which $cmd |") or die "Can't open which: $!";
  my @lines = <$p>;
  close $p;
  my $exit_value = $? >> 8;
  if ($exit_value != 0 || @lines != 1) {
    return undef;
  }
  chomp $lines[0];
  return $lines[0];
}

sub create_submission {
  my $job = shift;
  my $jobnumber = $job->{jobnumber};

  my $logfile = abs_path($job->{logfile});
  my $user = $ENV{USER};

  my $ant_cmd = "$ANT_BIN $ANT_ARGS";

  for my $inputfile (@{$job->{inputfiles}}) {
    $inputfile = abs_path($inputfile);
    $ant_cmd .= " -i '$inputfile'";
  }
  my $outputfile = abs_path($job->{outputfile});
  $ant_cmd .= " -o '$outputfile'";

  my $qsub_cmd = $QSUB_BIN;

  $qsub_cmd .= " -N '$jobtag/$jobnumber'";

  # mails when job aborts
  $qsub_cmd .= " -m a";         # begin -m b, ends -m e
  $qsub_cmd .= " -M '$user\@kph.uni-mainz.de'";

  # logging: combine STDERR and STDOUT
  $qsub_cmd .= " -j oe -o '$logfile'";

  # misc stuff: batch quque, -V take over environment, walltime...
  $qsub_cmd .= " -z -q $queue -V -l ncpus=1 -l walltime=$walltime -p $priority";

  return [$qsub_cmd, $ant_cmd];
}

sub submit_job {
  my $submission = shift;
  my $qsub_cmd = $submission->[0];
  my $ant_cmd = $submission->[1];
  # open pipe to qsub
  open(my $qsub_pipe, "| $qsub_cmd")
    or die "Can't open pipe to $QSUB_BIN: $!";
  print $qsub_pipe $ant_cmd;
  close $qsub_pipe or die "Cannot close pipe to $QSUB_BIN";
}



sub print_help {
  print <<__EOF;
Usage: AntSubmit [--clean|--backup] [--tag jobtag] [--filelist filename] -- [optional Ant arguments]

Submit jobs running Ant on files in read from STDIN (or from file list
specified by --filelist), output goes to current directory.

Options:

  --clean     Delete <outputdir> (and logs) before submission.
  --backup    Rename <outputdir> (and logs) to timestamped folder before submission.
  --tag       Specify a custom job tag, default is Ant
  --filelist  Read from file instead of STDIN
  --no_log    Do not write submission into AntSubmit.log
  --no_test   Do not run first job as test before submission
  --no_qsub   Do not submit, but dumb Ant commands on STDOUT
  --queue     Set job queue (default: 'batch')
  --walltime  Set walltime (default: 2:00:00, for dflt_short)
  --priority  Job priority, higher the better (default: 0)
__EOF
  exit 255;
}
